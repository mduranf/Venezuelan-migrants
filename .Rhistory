warning(paste("Failed to process", file_name, ":", e$message))
})
}
}
# -------- 4. MIGRACION
# ========================================================
migration <- purrr::map_dfr(path_migracion, read_data_migracion)
View(migration)
table(migration$p756s3)
migration <- migration %>%
rename(vivienda = directorio,
hogar1 = secuencia_p,
hogar2 = hogar,
persona = orden,
siempre_ha_vivido = p6074,
donde_nacio1 = p756,
nacio_otro_dpto1 = p756s1,
nacio_otro_pais1 = p756s3,
donde_5_years1 = p755,
vivia5_otro_dpto1 = p755s1,
vivia5_otro_pais1 = p755s3,
vivia5_cabecera1 = p754,
donde_1_year1 = p753,
vivia1_otro_dpto1 = p753s1,
vivia1_otro_pais1 = p753s3,
vivia1_cabecera1 = p752,
motivo1 = p1662,
donde_nacio2 = p3373,
nacio_otro_dpto2 = p3373s1,
nacio_otro_pais2 = p3373s3,
year_llego_col = p3373s3a1,
mes_llego_col = p3373s3a2,
nacionalidad = p3374,
pais_nacionalidad1 = p3374s1,
pais_nacionalidad2 = p3374s2,
year_volvio_col = p3381,
donde_5_years2 = p3382,
vivia5_otro_dpto2 = p3382s1,
vivia5_otro_pais2 = p3382s3,
vivia5_cabecera2 = p3383,
donde_1_year2 = p3384,
vivia1_otro_dpto2 = p3384s1,
vivia1_otro_pais2 = p3384s3,
vivia1_cabecera2 = p3385,
motivo2 = p3386,
intencion_quedarse = p3375,
cuantos_meses_quedarse = p3375s1) %>%
select(vivienda, hogar1, hogar2, persona, year, dpto, siempre_ha_vivido, donde_nacio1,
donde_nacio2, nacionalidad, nacio_otro_dpto1, nacio_otro_dpto2, nacio_otro_pais1,
nacio_otro_pais2, donde_5_years1, donde_5_years2, vivia5_otro_dpto1,
vivia5_otro_dpto2, vivia5_otro_pais1, vivia5_otro_pais2, vivia5_cabecera2,
vivia5_cabecera1, donde_1_year1, donde_1_year2, vivia1_otro_dpto1, vivia1_otro_dpto2,
vivia1_otro_pais1, vivia1_otro_pais2, vivia1_cabecera1, vivia1_cabecera2,
motivo1, motivo2, year_llego_col, mes_llego_col, pais_nacionalidad1, pais_nacionalidad2,
year_volvio_col, motivo1, motivo2, intencion_quedarse, cuantos_meses_quedarse)
table(migration$nacio_otro_pais1)
table(migration$nacio_otro_pais2)
table(final$nacio_otro_pais)
migration <- migration %>%
mutate(hogar = if_else(!is.na(hogar1), hogar1, hogar2),
id = as.numeric(str_c(vivienda, hogar, persona)),
donde_nacio = if_else(!is.na(donde_nacio1), donde_nacio1, donde_nacio2),
nacio_otro_dpto = if_else(!is.na(nacio_otro_dpto1), nacio_otro_dpto1, nacio_otro_dpto2),
nacio_otro_pais = if_else(!is.na(nacio_otro_pais1), nacio_otro_pais1, nacio_otro_pais2),
donde_5_years = if_else(!is.na(donde_5_years1), donde_5_years1, donde_5_years2),
vivia5_otro_dpto = if_else(!is.na(vivia5_otro_dpto1), vivia5_otro_dpto1, vivia5_otro_dpto2),
vivia5_otro_pais = if_else(!is.na(vivia5_otro_pais1), vivia5_otro_pais1, vivia5_otro_pais2),
vivia5_cabecera = if_else(!is.na(vivia5_cabecera1), vivia5_cabecera1, vivia5_cabecera2),
donde_1_year = if_else(!is.na(donde_1_year1), donde_1_year1, donde_1_year2),
vivia1_otro_dpto = if_else(!is.na(vivia1_otro_dpto1), vivia1_otro_dpto1, vivia1_otro_dpto2),
vivia1_otro_pais = if_else(!is.na(vivia1_otro_pais1), vivia1_otro_pais1, vivia1_otro_pais2),
vivia1_cabecera = if_else(!is.na(vivia1_cabecera1), vivia1_cabecera1, vivia1_cabecera2),
motivo = if_else(!is.na(motivo1), motivo1, motivo2)) %>%
select(id, year, dpto, siempre_ha_vivido, donde_nacio, nacio_otro_dpto,
nacio_otro_pais, nacionalidad, donde_5_years, vivia5_otro_dpto,
vivia5_otro_pais, vivia5_cabecera, donde_1_year, vivia1_otro_dpto,
vivia1_otro_pais, vivia1_cabecera, motivo, year_llego_col, mes_llego_col,
pais_nacionalidad1, pais_nacionalidad2, year_volvio_col, intencion_quedarse,
cuantos_meses_quedarse)
table(migration$nacio_otro_pais)
# -------- 4. MIGRACION
# ========================================================
migration <- purrr::map_dfr(path_migracion, read_data_migracion)
migration <- migration %>%
rename(vivienda = directorio,
hogar1 = secuencia_p,
hogar2 = hogar,
persona = orden,
siempre_ha_vivido = p6074,
donde_nacio1 = p756,
nacio_otro_dpto1 = p756s1,
nacio_otro_pais1 = p756s3,
donde_5_years1 = p755,
vivia5_otro_dpto1 = p755s1,
vivia5_otro_pais1 = p755s3,
vivia5_cabecera1 = p754,
donde_1_year1 = p753,
vivia1_otro_dpto1 = p753s1,
vivia1_otro_pais1 = p753s3,
vivia1_cabecera1 = p752,
motivo1 = p1662,
donde_nacio2 = p3373,
nacio_otro_dpto2 = p3373s1,
nacio_otro_pais2 = p3373s3,
year_llego_col = p3373s3a1,
mes_llego_col = p3373s3a2,
nacionalidad = p3374,
pais_nacionalidad1 = p3374s1,
pais_nacionalidad2 = p3374s2,
year_volvio_col = p3381,
donde_5_years2 = p3382,
vivia5_otro_dpto2 = p3382s1,
vivia5_otro_pais2 = p3382s3,
vivia5_cabecera2 = p3383,
donde_1_year2 = p3384,
vivia1_otro_dpto2 = p3384s1,
vivia1_otro_pais2 = p3384s3,
vivia1_cabecera2 = p3385,
motivo2 = p3386,
intencion_quedarse = p3375,
cuantos_meses_quedarse = p3375s1) %>%
select(vivienda, hogar1, hogar2, persona, year, dpto, siempre_ha_vivido, donde_nacio1,
donde_nacio2, nacionalidad, nacio_otro_dpto1, nacio_otro_dpto2, nacio_otro_pais1,
nacio_otro_pais2, donde_5_years1, donde_5_years2, vivia5_otro_dpto1,
vivia5_otro_dpto2, vivia5_otro_pais1, vivia5_otro_pais2, vivia5_cabecera2,
vivia5_cabecera1, donde_1_year1, donde_1_year2, vivia1_otro_dpto1, vivia1_otro_dpto2,
vivia1_otro_pais1, vivia1_otro_pais2, vivia1_cabecera1, vivia1_cabecera2,
motivo1, motivo2, year_llego_col, mes_llego_col, pais_nacionalidad1, pais_nacionalidad2,
year_volvio_col, motivo1, motivo2, intencion_quedarse, cuantos_meses_quedarse)
migration <- migration %>%
mutate(hogar = if_else(!is.na(hogar1), hogar1, hogar2),
id = as.numeric(str_c(vivienda, hogar, persona)),
donde_nacio = if_else(!is.na(donde_nacio1), donde_nacio1, donde_nacio2),
nacio_otro_dpto = if_else(!is.na(nacio_otro_dpto1), nacio_otro_dpto1, nacio_otro_dpto2),
nacio_otro_pais = if_else(!is.na(nacio_otro_pais1), nacio_otro_pais1, nacio_otro_pais2),
donde_5_years = if_else(!is.na(donde_5_years1), donde_5_years1, donde_5_years2),
vivia5_otro_dpto = if_else(!is.na(vivia5_otro_dpto1), vivia5_otro_dpto1, vivia5_otro_dpto2),
vivia5_otro_pais = if_else(!is.na(vivia5_otro_pais1), vivia5_otro_pais1, vivia5_otro_pais2),
vivia5_cabecera = if_else(!is.na(vivia5_cabecera1), vivia5_cabecera1, vivia5_cabecera2),
donde_1_year = if_else(!is.na(donde_1_year1), donde_1_year1, donde_1_year2),
vivia1_otro_dpto = if_else(!is.na(vivia1_otro_dpto1), vivia1_otro_dpto1, vivia1_otro_dpto2),
vivia1_otro_pais = if_else(!is.na(vivia1_otro_pais1), vivia1_otro_pais1, vivia1_otro_pais2),
vivia1_cabecera = if_else(!is.na(vivia1_cabecera1), vivia1_cabecera1, vivia1_cabecera2),
motivo = if_else(!is.na(motivo1), motivo1, motivo2),
nacio_otro_pais = if_else(nacio_otro_pais == 862, 3, nacio_otro_pais)) %>%
select(id, year, dpto, siempre_ha_vivido, donde_nacio, nacio_otro_dpto,
nacio_otro_pais, nacionalidad, donde_5_years, vivia5_otro_dpto,
vivia5_otro_pais, vivia5_cabecera, donde_1_year, vivia1_otro_dpto,
vivia1_otro_pais, vivia1_cabecera, motivo, year_llego_col, mes_llego_col,
pais_nacionalidad1, pais_nacionalidad2, year_volvio_col, intencion_quedarse,
cuantos_meses_quedarse)
table(migration$nacio_otro_pais)
write_parquet(migration, "~/Documents/Development Management/Dissertation/Data/migration.parquet")
filter_dpto(input_path = "~/Documents/Development Management/Dissertation/Data")
# ========================================================
# Author: Maria Juliana Duran
# Date: June 2025
# Goal: This code merges all modules and tests the merge
# ========================================================
# -------- SET UP
# ========================================================
library(pacman)
p_load(purrr, readr, tidyverse, janitor, stringr, arrow, tools)
files <- list.files("~/Documents/Development Management/Dissertation/Data/final", full.names = T)
# -------- 1. FUNCTIONS
# ========================================================
strip_suffixes <- function(name) {
str_remove(name, "(\\.x|\\.y|\\.x\\.x|\\.y\\.y|\\.x\\.x\\.x|\\.y\\.y\\.y|\\.x\\.x\\.x\\.x|\\.y\\.y\\.y\\.y)+$")
}
read_data <- function(path) {
df <- read_parquet(path) %>%
select(-dpto)
}
check_conflict_free <- function(data, base) {
cols <- names(data)[str_detect(names(data), paste0("^", base, "(\\.|$)"))]
if (length(cols) < 2) return(TRUE)
cols_data <- map(cols, ~ as.character(data[[.x]]))
has_conflict <- pmap_lgl(cols_data, function(...) {
vals <- c(...)
vals <- vals[!is.na(vals)]
length(unique(vals)) > 1
})
!any(has_conflict)
}
unify_columns <- function(data, base) {
cols <- names(data)[str_detect(names(data), paste0("^", base, "(\\.|$)"))]
if (!(base %in% cols) && base %in% names(data)) {
cols <- c(base, cols)
}
data %>%
mutate("{base}" := coalesce(!!!syms(cols))) %>%
select(-setdiff(cols, base))
}
# -------- 2. READ DATA
# ========================================================
datasets <- set_names(map(files, read_data),
file_path_sans_ext(basename(files)))
df <- datasets[names(datasets) != "hogares"]
hogares <- datasets[["hogares"]]
hogares_persona <- hogares %>% filter(!is.na(persona))
hogares_no_persona <- hogares %>% filter(is.na(persona)) %>%
select(-c(id,persona))
# -------- 3. MERGE PERSONAS
# ========================================================
personas_merged <- reduce(df,
~ full_join(.x, .y, by = c("id", "year")))
personas_merged <- personas_merged %>%
left_join(hogares_persona, by = c("id", "year"))
# -------- 4. TESTS PERSONAS
# ========================================================
# 1. Identify duplicates
base_vars <- names(personas_merged) %>%
tibble(original = .) %>%
mutate(base = strip_suffixes(original)) %>%
group_by(base) %>%
filter(n() > 1) %>%
summarise(vars = list(original), .groups = "drop")
# 2. Compare row to row
comparison_results <- base_vars %>%
mutate(are_all_identical = map_lgl(vars, function(cols) {
cols_data <- map(cols, ~ as.character(personas_merged[[.x]]))
first_col <- cols_data[[1]]
all(map_lgl(cols_data[-1], ~ all(coalesce(.x, "__NA__") == coalesce(first_col, "__NA__"))))
}))
comparison_results
# 3. Test if they have conflicts
results <- base_vars %>%
mutate(no_conflict = map_lgl(base, ~ check_conflict_free(personas_merged, .x)))
results
no_conflict <- results %>%
filter(no_conflict) %>%
pull(base)
for (base in no_conflict) {
personas_merged <- unify_columns(personas_merged, base)
}
# -------- 3. MERGE HOGARES
# ========================================================
hogar_vars <- c("tipo_vivienda", "cuantos_hogares", "propia_vivienda", "propia_cual",
"corriente", "ahorros", "cdt", "prestamo_vivienda", "prestamo_vehiculo",
"prestamo_libre", "tarjeta_credito", "otro", "ningun_prestamo", "no_sabe")
missing_household <- personas_merged %>%
filter(if_all(all_of(hogar_vars), is.na))
recovered <- missing_household %>%
select(-all_of(hogar_vars)) %>%
left_join(hogares_no_persona, by = c("vivienda", "hogar", "year"))
successful_merge <- personas_merged %>%
filter(!if_all(all_of(hogar_vars), is.na))
final <- bind_rows(personas_merged, recovered) %>%
select(id, vivienda, hogar, persona, year, nacio_otro_pais, nacionalidad,
siempre_ha_vivido, donde_nacio, nacio_otro_dpto, year_llego_col,
everything())
table(final$nacio_otro_pais)
write_parquet(final, "~/Documents/Development Management/Dissertation/Data/final/geih_bogota.parquet")
setwd("~/Documents/git/Venezuelan-migrants")
here::here()
library(pacman)
p_load(purrr, readr, tidyverse, janitor, stringr, data.table, arrow, tools, here)
parser <- ArgumentParser()
p_load(purrr, readr, tidyverse, janitor, stringr, data.table, arrow, tools, here, argparse)
parser <- ArgumentParser()
parser$add_argument("--generales",
default = here::here("~/Documents/git/Venezuelan-migrants/cleaning/input/generales"))
args <- parser$parse_args()
path_generales <- list.files(path = args$generales,
full.names = T)
library(pacman)
p_load(purrr, readr, tidyverse, janitor, stringr, data.table, arrow, tools)
path_generales <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/generales",
full.names = T)
path_hogares <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/hogar_vivienda",
full.names = T)
path_migracion <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/migracion",
full.names = T)
path_fuerza <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/fuerza_trabajo",
full.names = T)
path_ocupados <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/ocupados",
full.names = T)
path_desocupados <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/desocupados",
full.names = T)
path_inactivos <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/inactivos",
full.names = T)
path_otras <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/otras_actividades",
full.names = T)
path_otro_ingreso <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/otro_ingreso",
full.names = T)
path_mpft <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/mpft",
full.names = T)
path_infantil <- list.files(path = "~/Documents/git/Venezuelan-migrants/cleaning/input/infantil",
full.names = T)
# -------- 1. FUNCTIONS
# ========================================================
detect_delim <- function(path) {
first_line <- readLines(path, n = 1, warn = FALSE)
commas <- stringr::str_count(first_line, ",")
semicolons <- stringr::str_count(first_line, ";")
if (semicolons > commas) {
return(";")
} else {
return(",")
}
}
read_data_generales <- function(path) {
year <- str_extract(path, "\\d{4}") %>% as.numeric()
month <- str_extract(path, "enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre")
# Exception: whitespace-delimited file
if (str_detect(basename(path), "septiembre_2021")) {
data <- read_table(path, show_col_types = FALSE) %>% clean_names()
} else {
# Auto-detect delimiter
delim <- detect_delim(path)
if (delim == ",") {
data <- read_csv(path, locale = locale(encoding = "Latin1")) %>% clean_names()
} else {
data <- read_delim(path, delim = ";", locale = locale(encoding = "Latin1"), escape_double = FALSE) %>% clean_names()
}
}
# Clean data
data <- data %>%
mutate(across(where(is.character), ~ as.numeric(.))) %>%
mutate(year = year, month = month)
return(data)
}
read_data_migracion <- function(path) {
year <- str_extract(path, "\\d{4}") %>% as.numeric()
month <- str_extract(path, "enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre")
if (year == 2021 && month %in% c("julio", "agosto", "septiembre", "octubre", "noviembre")) {
data <- read_csv(path)[, -1] %>% clean_names()
} else if (year == 2021 && month == "diciembre") {
data <- read_csv(path) %>% clean_names()
} else {
data <- read_delim(path, delim = ";", escape_double = FALSE) %>% clean_names()
}
# Data cleaning
data <- data %>%
mutate(across(everything(), ~ ifelse(. == ".", NA, .))) %>%
mutate(across(everything(), ~ as.numeric(.))) %>%
mutate(year = year)
return(data)
}
filter_dpto <- function(input_path,
output_path = "~/Documents/Development Management/Dissertation/Data/final",
dpto_value = 11) {
parquet_files <- list.files(input_path, pattern = "\\.parquet$", full.names = TRUE)
for (file in parquet_files) {
cat("Processing:", file, "\n")
file_name <- basename(file)
out_file <- file.path(output_path, file_name)
tryCatch({
df <- read_parquet(file)
if (!"dpto" %in% names(df)) {
warning(paste("Skipping", file_name, "- 'dpto' column not found"))
} else {
filtered <- df %>% filter(dpto == dpto_value)
write_parquet(filtered, out_file)
cat("Saved:", new_name, "\n")
}
}, error = function(e) {
warning(paste("Failed to process", file_name, ":", e$message))
})
}
}
# -------- 2. GENERALES
# ========================================================
generales <- purrr::map_dfr(path_generales, read_data_generales)
prueba <- generales %>% filter(is.na(directorio)) %>% select(year, ano, month)
generales <- generales %>%
select(directorio, secuencia_p, orden, year, dpto, hogar, p6040,p6081,
p6083, p6090, p6100, p6110, p6160, p6170, p3271, p3042, p3038, p3039,
discapacidad, esc, p6020, p6210) %>%
rename(vivienda = directorio,
hogar2 = secuencia_p,
persona = orden,
edad = p6040,
padre_reside = p6081,
madre_reside = p6083,
afiliado_seguridad_s = p6090,
cual_regimen = p6100,
quien_paga = p6110,
sabe_leer_escribir = p6160,
asiste_educacion = p6170,
sexo1 = p3271,
sexo2 = p6020,
ultimo_nivel_educativo1 = p3042,
ultimo_nivel_educativo2 = p6210,
orientacion_sexual = p3038,
genero = p3039,
escolaridad = esc)
generales <- generales %>%
mutate(hogar = if_else(!is.na(hogar), hogar, hogar2),
sexo = if_else(!is.na(sexo1), sexo1, sexo2),
ultimo_nivel_educativo = if_else(!is.na(ultimo_nivel_educativo1), ultimo_nivel_educativo1, ultimo_nivel_educativo2),
id = as.numeric(str_c(vivienda, hogar, persona))) %>%
select(vivienda, hogar, persona, id, year, dpto, hogar, discapacidad, edad, sexo, padre_reside,
madre_reside, afiliado_seguridad_s, cual_regimen, quien_paga, sabe_leer_escribir,
asiste_educacion, ultimo_nivel_educativo, orientacion_sexual, genero, escolaridad)
write_parquet(generales, "~/Documents/git/Venezuelan-migrants/cleaning/output/generales.parquet")
source("~/Documents/git/Venezuelan-migrants/cleaning/src/data_cleaning.R", echo=TRUE)
gc()
library(pacman)
p_load(purrr, readr, tidyverse, janitor, stringr, arrow, tools)
files <- list.files("~/Documents/git/Venezuelan-migrants/cleaning/output_bogota", full.names = T)
# -------- 1. FUNCTIONS
# ========================================================
strip_suffixes <- function(name) {
str_remove(name, "(\\.x|\\.y|\\.x\\.x|\\.y\\.y|\\.x\\.x\\.x|\\.y\\.y\\.y|\\.x\\.x\\.x\\.x|\\.y\\.y\\.y\\.y)+$")
}
read_data <- function(path) {
df <- read_parquet(path) %>%
select(-dpto)
}
check_conflict_free <- function(data, base) {
cols <- names(data)[str_detect(names(data), paste0("^", base, "(\\.|$)"))]
if (length(cols) < 2) return(TRUE)
cols_data <- map(cols, ~ as.character(data[[.x]]))
has_conflict <- pmap_lgl(cols_data, function(...) {
vals <- c(...)
vals <- vals[!is.na(vals)]
length(unique(vals)) > 1
})
!any(has_conflict)
}
unify_columns <- function(data, base) {
cols <- names(data)[str_detect(names(data), paste0("^", base, "(\\.|$)"))]
if (!(base %in% cols) && base %in% names(data)) {
cols <- c(base, cols)
}
data %>%
mutate("{base}" := coalesce(!!!syms(cols))) %>%
select(-setdiff(cols, base))
}
# -------- 2. READ DATA
# ========================================================
datasets <- set_names(map(files, read_data),
file_path_sans_ext(basename(files)))
df <- datasets[names(datasets) != "hogares"]
hogares <- datasets[["hogares"]]
hogares_persona <- hogares %>% filter(!is.na(persona))
hogares_no_persona <- hogares %>% filter(is.na(persona)) %>%
select(-c(id,persona))
# -------- 3. MERGE PERSONAS
# ========================================================
personas_merged <- reduce(df,
~ full_join(.x, .y, by = c("id", "year")))
personas_merged <- personas_merged %>%
left_join(hogares_persona, by = c("id", "year"))
# -------- 4. TESTS PERSONAS
# ========================================================
# 1. Identify duplicates
base_vars <- names(personas_merged) %>%
tibble(original = .) %>%
mutate(base = strip_suffixes(original)) %>%
group_by(base) %>%
filter(n() > 1) %>%
summarise(vars = list(original), .groups = "drop")
# 2. Compare row to row
comparison_results <- base_vars %>%
mutate(are_all_identical = map_lgl(vars, function(cols) {
cols_data <- map(cols, ~ as.character(personas_merged[[.x]]))
first_col <- cols_data[[1]]
all(map_lgl(cols_data[-1], ~ all(coalesce(.x, "__NA__") == coalesce(first_col, "__NA__"))))
}))
comparison_results
# 3. Test if they have conflicts
results <- base_vars %>%
mutate(no_conflict = map_lgl(base, ~ check_conflict_free(personas_merged, .x)))
results
no_conflict <- results %>%
filter(no_conflict) %>%
pull(base)
for (base in no_conflict) {
personas_merged <- unify_columns(personas_merged, base)
}
# -------- 3. MERGE HOGARES
# ========================================================
hogar_vars <- c("tipo_vivienda", "cuantos_hogares", "propia_vivienda", "propia_cual",
"corriente", "ahorros", "cdt", "prestamo_vivienda", "prestamo_vehiculo",
"prestamo_libre", "tarjeta_credito", "otro", "ningun_prestamo", "no_sabe")
missing_household <- personas_merged %>%
filter(if_all(all_of(hogar_vars), is.na))
recovered <- missing_household %>%
select(-all_of(hogar_vars)) %>%
left_join(hogares_no_persona, by = c("vivienda", "hogar", "year"))
successful_merge <- personas_merged %>%
filter(!if_all(all_of(hogar_vars), is.na))
final <- bind_rows(personas_merged, recovered) %>%
select(id, vivienda, hogar, persona, year, nacio_otro_pais, nacionalidad,
siempre_ha_vivido, donde_nacio, nacio_otro_dpto, year_llego_col,
everything())
write_parquet(final, "~/Documents/git/Venezuelan-migrants/merge/output/geih_bogota.parquet")
filter_dpto <- function(input_path,
output_path = "~/Documents/git/Venezuelan-migrants/cleaning/output_bogota",
dpto_value = 11) {
parquet_files <- list.files(input_path, pattern = "\\.parquet$", full.names = TRUE)
for (file in parquet_files) {
cat("Processing:", file, "\n")
file_name <- basename(file)
out_file <- file.path(output_path, file_name)
tryCatch({
df <- read_parquet(file)
if (!"dpto" %in% names(df)) {
warning(paste("Skipping", file_name, "- 'dpto' column not found"))
} else {
filtered <- df %>% filter(dpto == dpto_value)
write_parquet(filtered, out_file)
cat("Saved:", new_name, "\n")
}
}, error = function(e) {
warning(paste("Failed to process", file_name, ":", e$message))
})
}
}
filter_dpto(input_path = "~/Documents/git/Venezuelan-migrants/cleaning/output")
